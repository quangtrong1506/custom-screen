name: Build Electron App

on:
    push:
        branches:
            - '**'

permissions:
    contents: write

jobs:
    cleanup-artifacts:
        runs-on: ubuntu-latest
        steps:
            - name: Delete old artifacts (keep latest 3)
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
              run: |
                  echo "Cleaning up old artifacts..."
                  artifacts_json=$(gh api repos/${{ github.repository }}/actions/artifacts?per_page=100)
                  echo "$artifacts_json" | jq '.artifacts | map(select(.expired == false)) | sort_by(.created_at) | reverse | .[3:] | .[].id' \
                    | xargs -n1 -I {} gh api -X DELETE repos/${{ github.repository }}/actions/artifacts/{}

    build-and-release:
        runs-on: windows-latest
        if: github.ref == 'refs/heads/main'
        env:
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
        steps:
            - uses: actions/checkout@v3

            - name: Set up Git for pushing tags
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git

            - uses: actions/setup-node@v3
              with:
                  node-version: 20
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Bump version and push tag
              run: |
                  npm version patch -m "chore: bump version to %s"
                  git push origin --follow-tags
                  git fetch --tags --force

            - name: Get latest tag
              id: get_version
              run: |
                  tag=$(git describe --tags --abbrev=0)
                  echo "tag=$tag" >> $GITHUB_OUTPUT

            - name: Build on Windows (.exe)
              run: npm run build

            - name: Prepare release folder
              run: |
                  mkdir release
                  cp dist/*.exe release/

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  name: Release ${{ steps.get_version.outputs.tag }}
                  tag_name: ${{ steps.get_version.outputs.tag }}
                  files: release/*
